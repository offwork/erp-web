import { Component, Input, OnInit, ViewChild } from '@angular/core';
import { AddComponent } from '../../../add.component';

import * as wjcCore from 'wijmo/wijmo';
import * as wjcGrid from 'wijmo/wijmo.grid';
import * as wjcGridFilter from 'wijmo/wijmo.grid.filter';
import * as wjcInput from 'wijmo/wijmo.input';

@Component({
  template: `
    <div class="btn-group float-right">
      <div class="btn-group px-2" dropdown placement="bottom right">
        <button type="button" class="btn btn-outline-danger btn-sm">Dışa Aktar</button>
        <button type="button" dropdownToggle class="btn btn-outline-danger btn-sm dropdown-toggle dropdown-toggle-split">
          <span class="caret"></span>
          <span class="sr-only">Split button!</span>
        </button>
        <ul *dropdownMenu class="dropdown-menu" role="menu">
          <li role="menuitem"><a class="dropdown-item" href="#" (click)="false">Excel Doc</a></li>
          <li role="menuitem"><a class="dropdown-item" href="#" (click)="false">PDF Doc</a>
        </ul>
      </div>
      <button class="btn btn-outline-primary btn-sm">Ekle</button>
    </div>
    <br><hr/>
    <div class="details">
      <wj-flex-grid #flexGrid [isReadOnly]="true"
                    (click)="clickedRow(flexGrid)"
                    [allowDragging]="'None'"
                    [deferResizing]="true" [itemsSource]="cvGettingStarted" >
        <wj-flex-grid-filter #filter></wj-flex-grid-filter>
        <wj-flex-grid-column>
          <ng-template wjFlexGridCellTemplate [cellType]="'Cell'">
            <div class="btn-group float-right" dropdown="" container="body">
              <button class="btn btn-transparent dropdown-toggle p-0" dropdownToggle=""
                      type="button" aria-haspopup="true" aria-expanded="true">
                <i class="icon-settings"></i>
              </button>
              <div class="dropdown-menu dropdown-menu-right" *dropdownMenu="">
                <a class="dropdown-item" href="#">Action</a>
                <a class="dropdown-item" href="#">Another action</a>
                <a class="dropdown-item" href="#">Something else here</a>
              </div>
            </div>
          </ng-template>
        </wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Checked'" [binding]="'checked'"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'ID'" [binding]="'id'"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Date'" [binding]="'date'" [format]="'MMM/dd/yyyy'"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Time'" [binding]="'time'" [format]="'t'"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Country'" [binding]="'country'"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Country ID'" [binding]="'countryMapped'" [dataMap]="countryMap"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Downloads'" [binding]="'downloads'"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Sales'" [binding]="'sales'"></wj-flex-grid-column>
        <wj-flex-grid-column [header]="'Expenses'" [binding]="'expenses'"></wj-flex-grid-column>
      </wj-flex-grid>
      <pagination class="pagination-sm" [totalItems]="totalItems"
                  [(ngModel)]="currentIndex"
                  [maxSize]="maxSize"
                  (pageChanged)="pageChanged($event)"
                  [boundaryLinks]="true" ></pagination>
    </div>
  `
})

export class CompaniesComponent implements OnInit, AddComponent {

  @Input() public data: any;

  cvGettingStarted: wjcCore.CollectionView;
  countryMap: wjcGrid.DataMap;
  @ViewChild('filter') filter: wjcGridFilter.FlexGridFilter;
  @ViewChild('flexGrid') flexGrid: wjcGrid.FlexGrid;

  // Paging
  public totalItems: number;
  public currentIndex: number = 1;
  public maxSize: number;

  public status: {isopen: boolean} = {isopen: false};

  constructor() {}

  ngOnInit() {
    // initialize the collection view
    this.cvGettingStarted = new wjcCore.CollectionView(this.getData());
    this.countryMap = new wjcGrid.DataMap(new wjcCore.CollectionView(this.getCountryMap()), 'key', 'name');
    this.cvGettingStarted.pageSize = 10;

    this.totalItems = this.getData().length;
    this.maxSize = this.cvGettingStarted.pageSize;

  }

  public change(event): void {
    this.status.isopen = !this.status.isopen;
    console.log('DD Status: ', this.status.isopen);
  }

  clickedRow(grid: wjcGrid.FlexGrid) {
    console.log('ROWS: ', this.cvGettingStarted.items[grid.selection.row]);

  }

  public pageChanged(event: any): void {
    console.log('Page changed to: ' + event.page);
    console.log('Number items per page: ' + event.itemsPerPage);
    this.cvGettingStarted.moveToPage(event.page - 1);
  }

  public menuItemClicked(menu: wjcInput.Menu) {
    console.log('selected options: ', menu.selectedIndex);
  }

  getData(): any[] {
    // create some random data
    const countries = 'US,Germany,UK,Japan,Italy,Greece'.split(','),
      data = [];
    for (let i = 0; i < 50; i++) {
      data.push({
        id: i,
        checked: i % 9 == 0,
        date: new Date(2015, i % 12, (i + 1) % 25),
        time: new Date(2015, i % 12, (i + 1) % 25, i % 24, i % 60, i % 60),
        country: countries[i % countries.length],
        countryMapped: i % countries.length,
        downloads: Math.round(Math.random() * 20000),
        sales: Math.random() * 10000,
        expenses: Math.random() * 5000,
      });
    }
    return data;
  }

  getCountryMap(): { name: string, key: number }[] {
    return [
      { name: 'US', key: 0 },
      { name: 'Germany', key: 1 },
      { name: 'Japan', key: 2 },
      { name: 'Italy', key: 3 },
      { name: 'Greece', key: 4 },
      { name: 'Spain', key: 5 },
      { name: 'Chile', key: 6 },
      { name: 'China', key: 7 },
      { name: 'Canada', key: 8 },
      { name: 'Australia', key: 9 },
      { name: 'Austria', key: 10 }
    ];
  }
}
